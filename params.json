{"name":"Payola","tagline":"Drop-in Rails engine for accepting payments with Stripe","body":"# Payola\r\n\r\n[![Gem Version](https://badge.fury.io/rb/payola-payments.svg)](http://badge.fury.io/rb/payola-payments) [![CircleCI](https://circleci.com/gh/peterkeen/payola.svg?style=shield)](https://circleci.com/gh/peterkeen/payola) [![Dependency Status](https://gemnasium.com/peterkeen/payola.svg)](https://gemnasium.com/peterkeen/payola)\r\n\r\nPayments with Stripe for your Rails application.\r\n\r\n## What does this do?\r\n\r\nPayola is a drop-in Rails engine that lets you sell one or more products by just including a module in your models. It includes:\r\n\r\n* An easy to embed, easy to customize, async Stripe Checkout button\r\n* Asynchronous payments, usable with any background processing system\r\n* Full webhook integration\r\n* Easy extension hooks for adding your own functionality\r\n\r\nTo see Payola in action, check out the site for [Mastering Modern Payments: Using Stripe with Rails](https://www.masteringmodernpayments.com). Read the book to find out the whys behind Payola's design.\r\n\r\n## Installation\r\n\r\nAdd Payola to your Gemfile:\r\n\r\n```ruby\r\ngem 'payola-payments'\r\n```\r\n\r\nRun the installer and install the migrations:\r\n\r\n```bash\r\n$ rails g payola:install\r\n$ rake db:migrate\r\n```\r\n\r\n### Single Sales\r\n\r\nTo start selling products, just include `Payola::Sellable`. For example, if you have a `Book` model:\r\n\r\n```ruby\r\nclass Book < ActiveRecord::Base\r\n  include Payola::Sellable\r\nend\r\n```\r\n\r\nEach sellable model requires three attributes:\r\n\r\n* `price`, (attribute) an amount in the format that Stripe expects. For USD this is cents.\r\n* `permalink`, (attribute) a human-readable slug that is exposed in the URL\r\n* `name`, (attribute) a human-readable name exposed on product pages\r\n\r\nThere are also two optional methods you can implement on your sellable:\r\n\r\n* `redirect_path` takes the sale as an argument and returns a path. The buyer's browser will be redirected to that path after a successful sale. This defaults to `/`.\r\n* `currency` returns the currency for this product. Payola will default to `usd`.\r\n\r\nWhen people buy your product, Payola records information in `Payola::Sale` records and will record history if you have the `paper_trail` gem installed. **It is highly recommended to install paper_trail**.\r\n\r\n### Checkout Button\r\n\r\nTo sell a product, use the `checkout` partial like this:\r\n\r\n```rhtml\r\n<%= render 'payola/transactions/checkout', sellable: YourProductClass.first %>\r\n```\r\n\r\nThis will insert a Stripe Checkout button. The `checkout` partial has a bunch of options:\r\n\r\n* `sellable`: The product to sell. Required.\r\n* `button_text`: What to put on the button. Defaults to \"Pay Now\"\r\n* `button_class`: What class to put on the actual button. Defaults to \"stripe-button-el\".\r\n* `name`: What to put at the top of the Checkout popup. Defaults to `product.name`.\r\n* `description`: What to show as the description in the popup. Defaults to product name + the formatted price.\r\n* `product_image_path`: An image to insert into the Checkout popup. Defaults to blank.\r\n* `panel_label`: The label of the button in the Checkout popup.\r\n* `allow_remember_me`: Whether to show the Remember me checkbox. Defaults to true.\r\n* `email`: Email address to pre-fill. Defaults to blank.\r\n\r\n## Configuration\r\n\r\n```ruby\r\n# config/initializers/payola.rb\r\n\r\nPayola.configure do |payola|\r\n  payola.subscribe 'payola.book.sale.finished' do |sale|\r\n    SaleMailer.receipt(sale.guid).deliver\r\n  end\r\n\r\n  payola.subscribe 'payola.book.sale.failed' do |sale|\r\n    SaleMailer.admin_failed(sale.guid).deliver\r\n  end\r\n\r\n  payola.subscribe 'payola.book.sale.refunded' do |sale|\r\n    SaleMailer.admin_refunded(sale.guid).deliver\r\n  end\r\nend\r\n```\r\n\r\n### Events\r\n\r\nPayola wraps the StripeEvent gem for event processing and adds a few special sale-related events. Each one of these events passes the related `Sale` instance instead of a `Stripe::Event`. They are sent in-process so you don't have to wait for Stripe to send the corresponding webhooks.\r\n\r\n* `payola.<product_class>.sale.finished`, when a sale completes successfully\r\n* `payola.<product_class>.sale.failed`, when a charge fails\r\n* `payola.<product_class>.sale.refunded`, when a charge is refunded\r\n\r\n(In these examples, `<product_class>` is the underscore'd version of the product's class name.)\r\n\r\n### Pre-charge Filter\r\n\r\nYou can set a callback that Payola will call immediately before attempting to make a charge. You can use this to, for example, check to see if the email address has been used already. To stop Payola from making a charge, throw a `RuntimeError`. The sale will be set to `errored` state and the message attached to the runtime error will be propogated back to the user.\r\n\r\n```ruby\r\nPayola.configure do |payola|\r\n  payola.charge_verifier = lambda do |sale|\r\n    raise \"Improper sale!\" unless sale.amount > 10_000_000\r\n  end\r\nend\r\n```\r\n\r\n### Webhooks\r\n\r\nYou can subscribe to any webhook events you want as well. Payola will dedupe events as they come in. Make sure to set your webhook address in Stripe's management interface to:\r\n\r\n`https://www.example.com/payola/events`\r\n\r\nTo subscribe to a webhook event:\r\n\r\n```ruby\r\nPayola.configure do |payola|\r\n  payola.subscribe 'charge.succeeded' do |event|\r\n    sale = Sale.find_by(stripe_id: event.data.object.id)\r\n    SaleMailer.admin_receipt(sale.guid)\r\n  end\r\nend\r\n```\r\n\r\nPayola uses `StripeEvent#event_retriever` internally. If you would like to customize or filter the events that come through, use Payola's `event_filter`:\r\n\r\n```ruby\r\nPayola.configure do |payola|\r\n  payola.event_filter = lambda do |event|\r\n    return nil unless event.blah?\r\n    event\r\n  end\r\nend\r\n```\r\n\r\n`event_filter` takes an event and returns either `nil` or an event. If you return nil, the event ID will be recorded in the database but no further action will be taken. Returning the event allows processing to continue.\r\n\r\n### Background Jobs\r\n\r\nPayola will attempt to auto-detect the job queuing system you are using. It currently supports the following systems:\r\n\r\n* Sidekiq (`:sidekiq`)\r\n* SuckerPunch (`:sucker_punch`)\r\n\r\nIf you want to force Payola to use a specific supported system, just set `background_worker` to the appropriate symbol. For example:\r\n\r\n```ruby\r\nPayola.background_worker = :sidekiq\r\n```\r\n\r\nYou can also set this to anything with a `call` method, for complete control over how Payola's jobs get queued. For example, you can run transactions in-process like this:\r\n\r\n```ruby\r\nPayola.background_worker = lambda do |sale|\r\n  sale.process!\r\nend\r\n```\r\n\r\n## TODO\r\n\r\n* Custom forms\r\n* Subscriptions\r\n* Affiliate tracking\r\n* Coupon codes\r\n\r\n## License\r\n\r\nPlease see the LICENSE file for licensing details.\r\n\r\n## Author\r\n\r\nPete Keen, [@zrail](https://twitter.com/zrail), [https://www.petekeen.net](https://www.petekeen.net)\r\n\r\n","google":"UA-5663087-17","note":"Don't delete this file! It's used internally to help with page regeneration."}